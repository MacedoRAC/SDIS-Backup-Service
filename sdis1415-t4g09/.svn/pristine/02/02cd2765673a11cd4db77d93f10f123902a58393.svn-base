package protocols;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Random;
import java.util.Vector;

import persistence.Chunk;
import main.Communication;
import main.FileManager;
import main.Main;

public class Backup extends Thread{

	private static Communication com;
	private boolean working;
	private String[] header;
	private byte[] body;
	private Vector<BackupSend> sendingArray;

	public String[] getHeader() {
		return header;
	}

	public void setHeader(String[] header) {
		this.header = header;
	}

	public byte[] getBody() {
		return body;
	}

	public void setBody(byte[] body) {
		this.body = body;
	}

	public Vector<BackupSend> getSendingArray() {
		return sendingArray;
	}

	public void setSendingArray(Vector<BackupSend> sendingArray) {
		this.sendingArray = sendingArray;
	}

	public Backup(String ip, int port) throws IOException {
		Backup.com = new Communication(ip, port);
		this.working = true;
		this.sendingArray = new Vector<BackupSend>();
	}
	
	public Backup() {
		// TODO Auto-generated constructor stub
	}

	@Override
	public void run(){
		byte[] msg;
		
		while(working){
			msg = com.receive();
			
			if(msg != null)
				receiving(msg);
		}
	}
	
	private void receiving(byte[] msg) {
		decrypte(msg);
		
		if(header[0] == "PUTCHUNK"){
			if(header[1] == Main.getVersion()){
				backupProcess();
			}
		}else{
			System.out.println("Wrong message: expected PUTCHUNK, but " + header[0] + " received.");
		}
		
	}

	private void backupProcess() {

		for(int i = 0; i < sendingArray.size(); i++){
			if(sendingArray.get(i).getHash() == header[2] && sendingArray.get(i).getChunkNo() == Integer.parseInt(header[3])){
				sendingArray.get(i).setToSend(true);
				break;
			}
		}
		
		//Analyze if there is enough space to store chunks
		if(Main.getDatabase().freeSpace() < body.length){
			System.out.println("Not ennough space to save a new chunk!");
			return;
		}
		
		//verify if the chunk already exists
		boolean chunkExists = false;
		
		for(int i = 0; i < Main.getDatabase().getChunks().size(); i++){
			if(Main.getDatabase().getChunks().get(i).getFileID() == header[2]){
				if(Main.getDatabase().getChunks().get(i).getChunkNo() == Integer.parseInt(header[3])){
					chunkExists = true;
					break;
				}
			}
		}
		
		//if not exists create a new chunk and send STORED message
		if(!chunkExists){
			Chunk newChunk;
			FileManager fileMan = new FileManager(header[2], Integer.parseInt(header[4]));
            fileMan.writeToFile(Integer.parseInt(header[3]), body);
            newChunk = new Chunk(header[2], Integer.parseInt(header[3]), Integer.parseInt(header[4]));
            Main.getDatabase().getChunks().add(newChunk);
		}
		
		
		//send stored message
		String sendMsg = "STORED " + Main.getVersion() + " " + header[2] + " " + header[3] + Main.getCRLF().toString() + Main.getCRLF().toString();

        Random r = new Random();
        int time = r.nextInt(401);
        try {
            sleep(time);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        com.send(sendMsg.getBytes(StandardCharsets.ISO_8859_1));
		
	}

	private void decrypte(byte[] msg) {
		//separate header information considering one or more spaces betweeen words
		String dec = msg.toString();
		String[] tmp = dec.split("\\s+");
		header = new String[tmp.length];
	
		int headerLength = 0;
		for(int i=0; i<tmp.length; i++){//remove any whitespace before and after each string
			header[i] = tmp[i].trim();
			headerLength += tmp[i].length();
		}
		
		//separate body
		body = new byte[dec.length() - headerLength + 4]; // +4 because of the two CRLF in the end of the header
		
		int bodyIndex = 0;
		for(int i = headerLength + 4; i<dec.length(); i++){
			body[bodyIndex] = msg[i];
		}	
	}

	public Communication getCom() {
		return com;
	}

	public void setCom(Communication com) {
		Backup.com = com;
	}

	public boolean isWorking() {
		return working;
	}

	public void setWorking(boolean working) {
		this.working = working;
	}
	
	
	public static class BackupSend extends Thread{
		
		private FileManager fileMan;
		private int repDegree;
		private int chunkNo;
		private int stored;
		private int tries;
		private int time;
		private String hash;
		private boolean file;
		private boolean toSend;
		
		
		@SuppressWarnings("static-access")
		public BackupSend(String file, int chunkN, int repD){
			
			this.fileMan = new FileManager(file, repD);
			
			this.time = 400;
			this.tries = 0;
			this.chunkNo = chunkN;
			this.repDegree = repD;
			this.stored = 0;
			this.toSend = false;
			this.file = false;
			this.hash = fileMan.getHashFilename().toString();
		}
		
		@SuppressWarnings("static-access")
		@Override
		public void run(){
			
			if(!file){
				try {
					chunkBackup(chunkNo);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}else{
				int fileParts = 0;
				
				try {
					while(fileMan.collectChunkData(fileParts)){
						String msg = "" + "PUTCHUNK " + Main.getVersion() + " " + hash + " " + fileParts + " " + fileMan.getRepDegree() + Main.getCRLF() + Main.getCRLF();
						byte[] tmp = msg.getBytes(StandardCharsets.ISO_8859_1);
						
						byte[] finalMsg = new byte[tmp.length + fileMan.getChunkData().length];
						System.arraycopy(tmp, 0, finalMsg, 0, tmp.length);
						System.arraycopy(fileMan.getChunkData(), 0, finalMsg, tmp.length, fileMan.getChunkData().length);
						
						//try to send msg
						do{
							stored = 0;
							Main.getBackup().getCom().send(finalMsg);
							
							try {
								sleep(time);
							} catch (InterruptedException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							tries++;
							time *= 2;
							
						}while(tries < 5 && fileMan.getRepDegree() > stored);
						
						//delete chunk from initiator peer and from database
						fileMan.delete(fileParts);
						Main.getDatabase().deleteFile(hash.toString());
						
						//reset initial values
						fileParts++;
					    stored = 0;
					    time = 500;
					    tries = 0;
					}
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		
		@SuppressWarnings("static-access")
		private void chunkBackup(int chunkNo) throws IOException {
			System.out.println("Collecting chunk data...");
			fileMan.collectChunkData(chunkNo);
			System.out.println("Chunk data collected sucessfully!");
			
			 String msg = "PUTCHUNK " + Main.getVersion() + " " + hash + " " + chunkNo + " " + fileMan.getRepDegree() + Main.getCRLF() + Main.getCRLF();
			 System.out.println("Message to send:\n" + msg);
			 
			 byte[] tmp = msg.getBytes(StandardCharsets.ISO_8859_1);
			
			 int msgSize = tmp.length + fileMan.getChunkData().length;
			 System.out.println(msgSize);
			 byte[] finalMsg = new byte[msgSize];
			 System.arraycopy(tmp, 0, finalMsg, 0, tmp.length);
			 System.arraycopy(fileMan.getChunkData(), 0, finalMsg, tmp.length, fileMan.getChunkData().length);

			 Random r = new Random();
			 time = r.nextInt(401);

			 try {
				 sleep(time);
			 } catch (InterruptedException e) {
				 e.printStackTrace();
			 }

			 if (!toSend) {
				 do{

					 stored = 0;
					 Main.getBackup().getCom().send(finalMsg);
					 
					 try {
						sleep(time);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					 
					 tries++;
					 time *= 2;
				 }while (tries < 5 && fileMan.getRepDegree() > stored);
			 }

			 if(fileMan.getRepDegree() > stored){
				 System.out.println("Backup time runned out for chunk number " + chunkNo + ". Replication Degree accomplished: " + fileMan.getRepDegree());
			 }
		}

		public FileManager getFileMan() {
			return fileMan;
		}
		public void setFileMan(FileManager fileMan) {
			this.fileMan = fileMan;
		}
		public int getRepDegree() {
			return repDegree;
		}
		public void setRepDegree(int repDegree) {
			this.repDegree = repDegree;
		}
		public int getChunkNo() {
			return chunkNo;
		}
		public void setChunkNo(int chunkNo) {
			this.chunkNo = chunkNo;
		}
		public int getStored() {
			return stored;
		}
		public void setStored(int stored) {
			this.stored = stored;
		}
		public int getTries() {
			return tries;
		}
		public void setTries(int tries) {
			this.tries = tries;
		}
		public int getTime() {
			return time;
		}
		public void setTime(int time) {
			this.time = time;
		}
		public String getHash() {
			return hash;
		}
		public void setHash(String hash) {
			this.hash = hash;
		}
		public boolean isFile() {
			return file;
		}
		public void setFile(boolean file) {
			this.file = file;
		}
		public boolean isToSend() {
			return toSend;
		}
		public void setToSend(boolean toSend) {
			this.toSend = toSend;
		}
		
	}

}
